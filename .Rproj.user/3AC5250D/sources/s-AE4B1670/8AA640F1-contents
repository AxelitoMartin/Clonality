library(Clonality)
library(variantprobs)
library(dplyr)
library(dtplyr)

data("tcga")
cancers <- c("BRCA","LUAD","PAAD")

all_pic_variants <- names(sort(summary(as.factor(tcga$Variant[tcga$Cancer_Code %in% cancers & tcga$Hugo_Symbol == "KRAS"]),maxsum = 10000), decreasing = T))[1:10]

col_names <- c("Variant", "BRCA_Count","BRCA_GT","BRCA_Emp","LUAD_Count","LUAD_GT","LUAD_Emp","PAAD_Count","PAAD_GT","PAAD_Emp")
variants_probs <- as.data.frame(matrix(nrow = length(all_pic_variants) + 4, ncol = length(col_names)))
colnames(variants_probs) <- col_names
# variants_probs$Variant <- c(all_pic_variants, "Tripletons", "Doubletons","Singletons","Each Unseen")


all_probs <- lapply(cancers, function(x){
  m <- length(unique(tcga[tcga$Cancer_Code == x,]$patient_id))
  
  counts_X <- as_tibble(tcga) %>%
    filter(Hugo_Symbol == "KRAS", Cancer_Code == x) %>%
    group_by(Variant) %>%
    tally() %>%
    ungroup()
  
  counts_final <- counts_X$n[match(all_pic_variants,counts_X$Variant)]
  # create variant list with a singleton and an unseen variant #
  xmut.ids <- all_pic_variants
  xmut.ids <- unlist(lapply(xmut.ids, function(y){
    paste0(strsplit(y,"__")[[1]][2:5],collapse = " ")
  }))
  tcga.cancer.type <- x
  reference.data = NULL
  combine.with.TCGA=FALSE
  
  # GT #
  freq.tcga <- get.mutation.frequencies(xmut.ids, tcga.cancer.type=x, reference.data=NULL,combine.with.TCGA=FALSE )
  
  out_freq_GT <- as.numeric(freq.tcga)
  
  ## run GT anyway lol ##
  var_freq <- as.data.table(tcga_mod)[Hugo_Symbol == "KRAS" & Cancer_Code == tcga.cancer.type,
                                      .(v_f = length(unique(patient_id))),
                                      by = .(Variant)
                                      ]
  # r <- unique(var_freq$v_f)
  N_r <- as.numeric(summary(as.factor(var_freq$v_f)))
  r <- as.numeric(names(summary(as.factor(var_freq$v_f))))
  N <- 3*d.gene$Exome_Size[match("KRAS", d.gene$Hugo_Symbol)]
  N0 <- N-nrow(var_freq)
  GT_temp <- goodturing_probs(r= r, N_r = N_r,m=m,N0 = N0,N = N)
  out_freq_GT <- c(out_freq_GT, as.numeric(GT_temp[c("3","2","1","0")]))
  out_freq_GT <- ifelse(is.na(out_freq_GT), )
  
  # Repeat with Orlitsky estimate for N0 and N #
  var_freq <- as.data.table(tcga_mod)[Hugo_Symbol == "KRAS",
                                      .(v_f = length(unique(patient_id))),
                                      by = .(Variant)
                                      ]
  
  N_r <- as.numeric(summary(as.factor(var_freq$v_f)))
  r <- as.numeric(names(summary(as.factor(var_freq$v_f))))
  GT_Orlitsky <- goodturing_probs(r= r, N_r = N_r,m=m)
  N0 <- attr(GT_Orlitsky,"N0")
  N <- N0 + sum(N_r)
  
  var_freq <- as.data.table(tcga_mod)[Hugo_Symbol == "KRAS" & Cancer_Code == tcga.cancer.type,
                                      .(v_f = length(unique(patient_id))),
                                      by = .(Variant)
                                      ]
  v_f <- var_freq$v_f
  names(v_f) <- var_freq$Variant
  GT_temp <- goodturing_probs(counts = v_f,m=m,N0 = N0,N = N)
  GT_Orlitsky <- GT_temp[xmut.ids]
  GT_Orlitsky <- as.numeric(ifelse(is.na(GT_Orlitsky),GT_temp["each_unseen"], GT_Orlitsky))
  
  N_r <- as.numeric(summary(as.factor(var_freq$v_f)))
  r <- as.numeric(names(summary(as.factor(var_freq$v_f))))
  GT_temp <- goodturing_probs(r = r, N_r = N_r,m=m,N0 = N0,N = N)
  out_GT_Orlitsky <- c(GT_Orlitsky, as.numeric(GT_temp[c("3","2","1","0")]))
  
  
  
  #   as.numeric(c(freq.tcga[-length(freq.tcga)],
  # sort(freq.tcga[-which(freq.tcga == min(freq.tcga))])[1],
  # freq.tcga[length(freq.tcga)]))
  
  # Emp #
  freq <- c()
  for(i in xmut.ids){
    freq <- c(freq,(nrow(tcga_mod %>%
                           filter(Variant == i, Cancer_Code == x))+1)/(m+1))
  }
  for(i in 3:0){
    freq <- c(freq,(i+1)/(m+1))
  }
  out_freq_Emp <- as.numeric(freq)
  #   as.numeric(c(freq[-length(freq)],
  # sort(freq[-which(freq == min(freq))])[1],
  # freq[length(freq)]))
  counts_final <- c(counts_final, c(3,2,1,0))
  return(list(
    "Counts" = counts_final,
    "GT" = out_freq_GT,
    "GT_Orlitsky" = out_GT_Orlitsky,
    "Emp" = out_freq_Emp))
})
names(all_probs) <- cancers