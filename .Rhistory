stop("xmut.ids should be of the following format: {Chromosome Location RefAllele AltAllele}, each entry separated by space, \n where chromosome is a number 1-22 or X or Y; \n location is genomic location in  GRCh37 build; \n RefAllele is a reference allele and AltAllele is Alternative allele/Tumor_Seq_Allele2. \n For example '10 100003849 G A', is the mutation at chromosome 10, genomic location 100003849, where reference allele G is substituted with A, or \n '10 100011448 - CCGCTGCAAT' is the insertion of 'CCGCTGCAAT' at chromosome 10, location 100011448. \n The ref and alt alleles follow standard TCGA maf file notations.")
if (is.null(tcga.cancer.type) & is.null(reference.data)) stop("You either need to specify 'tcga.cancer.type' to use TCGA based frequnecies or specify 'reference.data' to get reference dataset for frequency calculation")
if (combine.with.TCGA & (is.null(tcga.cancer.type) | is.null(reference.data))) stop("If you choose combine.with.TCGA=TRUE, i.e. to combine reference dataset with TCGA data, then you  need to  specify both'tcga.cancer.type'  and 'reference.data' ")
if (!combine.with.TCGA & (!is.null(tcga.cancer.type) & !is.null(reference.data))) warning("You choose combine.with.TCGA=FALSE, but specified both TCGA and reference data - only TCGA data will be used unless you choose combine.with.TCGA=TRUE")
# match variants to their genes #
matched_genes <- as.data.table(do.call('rbind',lapply(xmut.ids, function(x){
# print(x)
temp <- strsplit(x, " ")[[1]]
chr <- as.numeric(temp[1])
pos <- as.numeric(temp[2])
# print("test")
gene <- d.gene$Hugo_Symbol[d.gene$Chromosome == chr & pos > d.gene$Start & pos < d.gene$End]
if(length(gene)==0)
gene <- "MissingGeneName"
return(c(x,gene[1],NA))
})))
colnames(matched_genes) <- c("variant","gene","freq")
# get estimates for GT at that sites #
site_spe_gt <- as.data.table(GT_probs[[tcga.cancer.type]])
site_spe_agg_gt <- as.data.table(GT_agg_probs[[tcga.cancer.type]])
matched_genes
which(!is.na(matched_genes$freq))
which(is.na(matched_genes$freq))
colnames(matched_genes) <- c("variant","gene","freq")
# get estimates for GT at that sites #
site_spe_gt <- as.data.table(GT_probs[[tcga.cancer.type]])
site_spe_gt
# get estimates for GT at that sites #
site_spe_gt <- as.data.table(GT_probs[[tcga.cancer.type]] %>%
filter(warning==0))
# get estimates for GT at that sites #
site_spe_gt <- as.data.table(GT_probs[[tcga.cancer.type]])[warning ==0,]
site_spe_agg_gt <- as.data.table(GT_agg_probs[[tcga.cancer.type]])
# get estimates per genes found in the matching #
genes <- unique(matched_genes$gene)
i = 1
gene_temp <- genes[i]
variants <- matched_genes$variant[matched_genes$gene == gene_temp]
site_spe_gt_temp <- site_spe_gt[site_spe_gt$Gene == gene_temp,]
site_spe_gt_temp
nrow(site_spe_gt_temp)
variants_temp <- ifelse(variants %in% site_spe_gt_temp$Variant, variants, "each_unseen")
variants_temp
variants
i
gene_temp <- genes[i]
gene_temp
matched_genes$variant[matched_genes$gene == gene_temp]
gene_temp
matched_genes$gene
# match variants to their genes #
matched_genes <- as.data.table(do.call('rbind',lapply(xmut.ids, function(x){
# print(x)
temp <- strsplit(x, " ")[[1]]
chr <- as.numeric(temp[1])
pos <- as.numeric(temp[2])
# print("test")
gene <- d.gene$Hugo_Symbol[d.gene$Chromosome == chr & pos > d.gene$Start & pos < d.gene$End]
if(length(gene)==0)
gene <- "MissingGeneName"
return(c(x,gene[1],NA))
})))
colnames(matched_genes) <- c("variant","gene","freq")
warnings()
matched_genes
(all(substr(xmut.ids,1,1) %in% c(c(1:9),"X","Y") | substr(xmut.ids,1,2) %in% c(c(10:22)) ))
xmut.ids
xmut.ids <- gsub("X",23,xmut.ids)
grep("Y",xmut.ids)
tcga.cancer.type <- "LUAD"
reference.data <- NULL
combine.with.TCGA <- F
data("d.gene")
# d.gene <- data.table::setDT(d.gene)
# print(d.gene[1,])
# make these internal data once done #
load("/Users/axel/Desktop/MSKCC Work/Clonality Project/temp_clonality/Clonality/data/TCGA_GT_probs.Rdata")
load("/Users/axel/Desktop/MSKCC Work/Clonality Project/temp_clonality/Clonality/data/TCGA_GT_agg_probs.Rdata")
plus1<-TRUE
if (is.null(tcga.cancer.type) & is.null(reference.data)) stop("You either need to specify 'tcga.cancer.type' to use TCGA based frequnecies or specify 'reference.data' to get reference dataset for frequency calculation")
if (combine.with.TCGA & (is.null(tcga.cancer.type) | is.null(reference.data))) stop("If you choose combine.with.TCGA=TRUE, i.e. to combine reference dataset with TCGA data, then you  need to  specify both'tcga.cancer.type'  and 'reference.data' ")
if (!combine.with.TCGA & (!is.null(tcga.cancer.type) & !is.null(reference.data))) warning("You choose combine.with.TCGA=FALSE, but specified both TCGA and reference data - only TCGA data will be used unless you choose combine.with.TCGA=TRUE")
# match variants to their genes #
matched_genes <- as.data.table(do.call('rbind',lapply(xmut.ids, function(x){
# print(x)
temp <- strsplit(x, " ")[[1]]
chr <- as.numeric(temp[1])
pos <- as.numeric(temp[2])
# print("test")
gene <- d.gene$Hugo_Symbol[d.gene$Chromosome == chr & pos > d.gene$Start & pos < d.gene$End]
if(length(gene)==0)
gene <- "MissingGeneName"
return(c(x,gene[1],NA))
})))
colnames(matched_genes) <- c("variant","gene","freq")
# get estimates for GT at that sites #
site_spe_gt <- as.data.table(GT_probs[[tcga.cancer.type]])[warning ==0,]
site_spe_agg_gt <- as.data.table(GT_agg_probs[[tcga.cancer.type]])
# get estimates per genes found in the matching #
genes <- unique(matched_genes$gene)
i = 1
gene_temp <- genes[i]
gene_temp
variants <- matched_genes$variant[matched_genes$gene == gene_temp]
variants
site_spe_gt_temp <- site_spe_gt[site_spe_gt$Gene == gene_temp,]
site_spe_gt_temp
nrow(site_spe_gt_temp) > 0
variants_temp <- ifelse(variants %in% site_spe_gt_temp$Variant, variants, "each_unseen")
variants_temp
matched_genes[match(variants,matched_genes$variant) , 3]
as.numeric(site_spe_gt_temp$GT[match(variants_temp,site_spe_gt_temp$Variant)])
matched_genes[match(variants,matched_genes$variant) , 3] <- as.numeric(site_spe_gt_temp$GT[match(variants_temp,site_spe_gt_temp$Variant)])
data("d.gene")
# d.gene <- data.table::setDT(d.gene)
# print(d.gene[1,])
# make these internal data once done #
load("/Users/axel/Desktop/MSKCC Work/Clonality Project/temp_clonality/Clonality/data/TCGA_GT_probs.Rdata")
load("/Users/axel/Desktop/MSKCC Work/Clonality Project/temp_clonality/Clonality/data/TCGA_GT_agg_probs.Rdata")
plus1<-TRUE
if (is.null(tcga.cancer.type) & is.null(reference.data)) stop("You either need to specify 'tcga.cancer.type' to use TCGA based frequnecies or specify 'reference.data' to get reference dataset for frequency calculation")
if (combine.with.TCGA & (is.null(tcga.cancer.type) | is.null(reference.data))) stop("If you choose combine.with.TCGA=TRUE, i.e. to combine reference dataset with TCGA data, then you  need to  specify both'tcga.cancer.type'  and 'reference.data' ")
if (!combine.with.TCGA & (!is.null(tcga.cancer.type) & !is.null(reference.data))) warning("You choose combine.with.TCGA=FALSE, but specified both TCGA and reference data - only TCGA data will be used unless you choose combine.with.TCGA=TRUE")
# match variants to their genes #
matched_genes <- as.data.table(do.call('rbind',lapply(xmut.ids, function(x){
# print(x)
temp <- strsplit(x, " ")[[1]]
chr <- as.numeric(temp[1])
pos <- as.numeric(temp[2])
# print("test")
gene <- d.gene$Hugo_Symbol[d.gene$Chromosome == chr & pos > d.gene$Start & pos < d.gene$End]
if(length(gene)==0)
gene <- "MissingGeneName"
return(c(x,gene[1],NA))
})))
colnames(matched_genes) <- c("variant","gene","freq")
# get estimates for GT at that sites #
site_spe_gt <- as.data.table(GT_probs[[tcga.cancer.type]])[warning ==0,]
site_spe_agg_gt <- as.data.table(GT_agg_probs[[tcga.cancer.type]])
# get estimates per genes found in the matching #
genes <- unique(matched_genes$gene)
for(i in 1:length(genes)){
gene_temp <- genes[i]
variants <- matched_genes$variant[matched_genes$gene == gene_temp]
site_spe_gt_temp <- site_spe_gt[site_spe_gt$Gene == gene_temp,]
if(nrow(site_spe_gt_temp) > 0){
variants_temp <- ifelse(variants %in% site_spe_gt_temp$Variant, variants, "each_unseen")
matched_genes[match(variants,matched_genes$variant) , 3] <- as.numeric(site_spe_gt_temp$GT[match(variants_temp,site_spe_gt_temp$Variant)])
}
else{
variants_temp <- ifelse(variants %in% site_spe_agg_gt$Variant, variants, "each_unseen")
matched_genes[match(variants,matched_genes$variant) , 3] <- as.numeric(site_spe_agg_gt$GT_agg[match(variants_temp,site_spe_agg_gt$Variant)])
}
}
matched_genes
freq <- as.numeric(matched_genes$freq)
freq
library(Clonality)
data(lcis)
mut.matrix<-create.mutation.matrix(lcis )
xmut.ids <- rownames(mut.matrix)
xmut.ids <- gsub("X",23,xmut.ids)
tcga.cancer.type <- "LUAD"
reference.data <- NULL
combine.with.TCGA <- F
out_test <- get.mutation.frequencies(xmut.ids, tcga.cancer.type="LUAD", reference.data=NULL,combine.with.TCGA=FALSE )
out_test
library(Clonality)
data("d.gene")
# d.gene <- data.table::setDT(d.gene)
# print(d.gene[1,])
# make these internal data once done #
load("/Users/axel/Desktop/MSKCC Work/Clonality Project/temp_clonality/Clonality/data/TCGA_GT_probs.Rdata")
load("/Users/axel/Desktop/MSKCC Work/Clonality Project/temp_clonality/Clonality/data/TCGA_GT_agg_probs.Rdata")
plus1<-TRUE
if (is.null(tcga.cancer.type) & is.null(reference.data)) stop("You either need to specify 'tcga.cancer.type' to use TCGA based frequnecies or specify 'reference.data' to get reference dataset for frequency calculation")
if (combine.with.TCGA & (is.null(tcga.cancer.type) | is.null(reference.data))) stop("If you choose combine.with.TCGA=TRUE, i.e. to combine reference dataset with TCGA data, then you  need to  specify both'tcga.cancer.type'  and 'reference.data' ")
if (!combine.with.TCGA & (!is.null(tcga.cancer.type) & !is.null(reference.data))) warning("You choose combine.with.TCGA=FALSE, but specified both TCGA and reference data - only TCGA data will be used unless you choose combine.with.TCGA=TRUE")
# match variants to their genes #
matched_genes <- as.data.table(do.call('rbind',lapply(xmut.ids, function(x){
# print(x)
temp <- strsplit(x, " ")[[1]]
chr <- as.numeric(temp[1])
pos <- as.numeric(temp[2])
# print("test")
gene <- d.gene$Hugo_Symbol[d.gene$Chromosome == chr & pos > d.gene$Start & pos < d.gene$End]
if(length(gene)==0)
gene <- "MissingGeneName"
return(c(x,gene[1],NA))
})))
colnames(matched_genes) <- c("variant","gene","freq")
library(data.table)
data("d.gene")
# d.gene <- data.table::setDT(d.gene)
# print(d.gene[1,])
# make these internal data once done #
load("/Users/axel/Desktop/MSKCC Work/Clonality Project/temp_clonality/Clonality/data/TCGA_GT_probs.Rdata")
load("/Users/axel/Desktop/MSKCC Work/Clonality Project/temp_clonality/Clonality/data/TCGA_GT_agg_probs.Rdata")
plus1<-TRUE
# if (! (all(substr(xmut.ids,1,1) %in% c(c(1:9),"X","Y") | substr(xmut.ids,1,2) %in% c(c(10:22)) )))
#   stop("xmut.ids should be of the following format: {Chromosome Location RefAllele AltAllele}, each entry separated by space, \n where chromosome is a number 1-22 or X or Y; \n location is genomic location in  GRCh37 build; \n RefAllele is a reference allele and AltAllele is Alternative allele/Tumor_Seq_Allele2. \n For example '10 100003849 G A', is the mutation at chromosome 10, genomic location 100003849, where reference allele G is substituted with A, or \n '10 100011448 - CCGCTGCAAT' is the insertion of 'CCGCTGCAAT' at chromosome 10, location 100011448. \n The ref and alt alleles follow standard TCGA maf file notations.")
if (is.null(tcga.cancer.type) & is.null(reference.data)) stop("You either need to specify 'tcga.cancer.type' to use TCGA based frequnecies or specify 'reference.data' to get reference dataset for frequency calculation")
if (combine.with.TCGA & (is.null(tcga.cancer.type) | is.null(reference.data))) stop("If you choose combine.with.TCGA=TRUE, i.e. to combine reference dataset with TCGA data, then you  need to  specify both'tcga.cancer.type'  and 'reference.data' ")
if (!combine.with.TCGA & (!is.null(tcga.cancer.type) & !is.null(reference.data))) warning("You choose combine.with.TCGA=FALSE, but specified both TCGA and reference data - only TCGA data will be used unless you choose combine.with.TCGA=TRUE")
library(Clonality)
data(lcis)
mut.matrix<-create.mutation.matrix(lcis )
xmut.ids <- rownames(mut.matrix)
xmut.ids <- gsub("X",23,xmut.ids)
tcga.cancer.type <- "LUAD"
reference.data <- NULL
combine.with.TCGA <- F
library(data.table)
data("d.gene")
# d.gene <- data.table::setDT(d.gene)
# print(d.gene[1,])
# make these internal data once done #
load("/Users/axel/Desktop/MSKCC Work/Clonality Project/temp_clonality/Clonality/data/TCGA_GT_probs.Rdata")
load("/Users/axel/Desktop/MSKCC Work/Clonality Project/temp_clonality/Clonality/data/TCGA_GT_agg_probs.Rdata")
plus1<-TRUE
if (is.null(tcga.cancer.type) & is.null(reference.data)) stop("You either need to specify 'tcga.cancer.type' to use TCGA based frequnecies or specify 'reference.data' to get reference dataset for frequency calculation")
if (combine.with.TCGA & (is.null(tcga.cancer.type) | is.null(reference.data))) stop("If you choose combine.with.TCGA=TRUE, i.e. to combine reference dataset with TCGA data, then you  need to  specify both'tcga.cancer.type'  and 'reference.data' ")
if (!combine.with.TCGA & (!is.null(tcga.cancer.type) & !is.null(reference.data))) warning("You choose combine.with.TCGA=FALSE, but specified both TCGA and reference data - only TCGA data will be used unless you choose combine.with.TCGA=TRUE")
# match variants to their genes #
matched_genes <- as.data.table(do.call('rbind',lapply(xmut.ids, function(x){
# print(x)
temp <- strsplit(x, " ")[[1]]
chr <- as.numeric(temp[1])
pos <- as.numeric(temp[2])
# print("test")
gene <- d.gene$Hugo_Symbol[d.gene$Chromosome == chr & pos > d.gene$Start & pos < d.gene$End]
if(length(gene)==0)
gene <- "MissingGeneName"
return(c(x,gene[1],NA))
})))
colnames(matched_genes) <- c("variant","gene","freq")
# get estimates for GT at that sites #
site_spe_gt <- as.data.table(GT_probs[[tcga.cancer.type]])[warning ==0,]
site_spe_gt
# get estimates per genes found in the matching #
genes <- unique(matched_genes$gene)
for(i in 1:length(genes)){
gene_temp <- genes[i]
variants <- matched_genes$variant[matched_genes$gene == gene_temp]
site_spe_gt_temp <- site_spe_gt[site_spe_gt$Gene == gene_temp,]
if(nrow(site_spe_gt_temp) > 0){
variants_temp <- ifelse(variants %in% site_spe_gt_temp$Variant, variants, "each_unseen")
matched_genes[match(variants,matched_genes$variant) , 3] <- as.numeric(site_spe_gt_temp$GT[match(variants_temp,site_spe_gt_temp$Variant)])
}
else{
variants_temp <- ifelse(variants %in% site_spe_agg_gt$Variant, variants, "each_unseen")
matched_genes[match(variants,matched_genes$variant) , 3] <- as.numeric(site_spe_agg_gt$GT_agg[match(variants_temp,site_spe_agg_gt$Variant)])
}
}
# get estimates for GT at that sites #
site_spe_gt <- as.data.table(GT_probs[[tcga.cancer.type]])[warning ==0,]
site_spe_agg_gt <- as.data.table(GT_agg_probs[[tcga.cancer.type]])
# get estimates per genes found in the matching #
genes <- unique(matched_genes$gene)
for(i in 1:length(genes)){
gene_temp <- genes[i]
variants <- matched_genes$variant[matched_genes$gene == gene_temp]
site_spe_gt_temp <- site_spe_gt[site_spe_gt$Gene == gene_temp,]
if(nrow(site_spe_gt_temp) > 0){
variants_temp <- ifelse(variants %in% site_spe_gt_temp$Variant, variants, "each_unseen")
matched_genes[match(variants,matched_genes$variant) , 3] <- as.numeric(site_spe_gt_temp$GT[match(variants_temp,site_spe_gt_temp$Variant)])
}
else{
variants_temp <- ifelse(variants %in% site_spe_agg_gt$Variant, variants, "each_unseen")
matched_genes[match(variants,matched_genes$variant) , 3] <- as.numeric(site_spe_agg_gt$GT_agg[match(variants_temp,site_spe_agg_gt$Variant)])
}
}
freq <- as.numeric(matched_genes$freq)
names(freq)<-xmut.ids
freq
library(Clonality)
library(data.table)
data(lcis)
mut.matrix<-create.mutation.matrix(lcis )
xmut.ids <- rownames(mut.matrix)
xmut.ids <- gsub("X",23,xmut.ids)
tcga.cancer.type <- "LUAD"
reference.data <- NULL
combine.with.TCGA <- F
out_test <- get.mutation.frequencies(xmut.ids, tcga.cancer.type="LUAD", reference.data=NULL,combine.with.TCGA=FALSE )
library(Clonality)
library(Clonality)
library(data.table)
data(lcis)
mut.matrix<-create.mutation.matrix(lcis )
xmut.ids <- rownames(mut.matrix)
xmut.ids <- gsub("X",23,xmut.ids)
tcga.cancer.type <- "LUAD"
reference.data <- NULL
combine.with.TCGA <- F
out_test <- get.mutation.frequencies(xmut.ids, tcga.cancer.type="LUAD", reference.data=NULL,combine.with.TCGA=FALSE )
library(Clonality)
# library(dplyr)
# library(dtplyr)
library(Clonality)
library(data.table)
data(lcis)
mut.matrix<-create.mutation.matrix(lcis )
xmut.ids <- rownames(mut.matrix)
xmut.ids <- gsub("X",23,xmut.ids)
tcga.cancer.type <- "LUAD"
reference.data <- NULL
combine.with.TCGA <- F
out_test <- get.mutation.frequencies(xmut.ids, tcga.cancer.type="LUAD", reference.data=NULL,combine.with.TCGA=FALSE )
out_test
max(out_test)
library(Clonality)
library(variantprobs)
library(dplyr)
library(dtplyr)
data("tcga")
cancers <- c("BRCA","LUAD","PAAD")
all_pic_variants <- names(sort(summary(as.factor(tcga$Variant[tcga$Cancer_Code %in% cancers & tcga$Hugo_Symbol == "KRAS"]),maxsum = 10000), decreasing = T))[1:10]
col_names <- c("Variant", "BRCA_Count","BRCA_GT","BRCA_Emp","LUAD_Count","LUAD_GT","LUAD_Emp","PAAD_Count","PAAD_GT","PAAD_Emp")
variants_probs <- as.data.frame(matrix(nrow = length(all_pic_variants) + 4, ncol = length(col_names)))
colnames(variants_probs) <- col_names
m <- length(unique(tcga[tcga$Cancer_Code == x,]$patient_id))
counts_X <- as_tibble(tcga) %>%
filter(Hugo_Symbol == "KRAS", Cancer_Code == x) %>%
group_by(Variant) %>%
tally() %>%
ungroup()
x <- "BRCA"
m <- length(unique(tcga[tcga$Cancer_Code == x,]$patient_id))
counts_X <- as_tibble(tcga) %>%
filter(Hugo_Symbol == "KRAS", Cancer_Code == x) %>%
group_by(Variant) %>%
tally() %>%
ungroup()
counts_final <- counts_X$n[match(all_pic_variants,counts_X$Variant)]
# create variant list with a singleton and an unseen variant #
xmut.ids <- all_pic_variants
tcga.cancer.type <- x
reference.data = NULL
combine.with.TCGA=FALSE
# GT #
freq.tcga <- get.mutation.frequencies(xmut.ids, tcga.cancer.type=x, reference.data=NULL,combine.with.TCGA=FALSE )
xmut.ids
strsplit(xmut.ids[1],"__")
strsplit(xmut.ids[1],"__")[[1]][2:4]
paste(strsplit(xmut.ids[1],"__")[[1]][2:5]," ")
paste0(strsplit(xmut.ids[1],"__")[[1]][2:5]," ")
paste0(strsplit(xmut.ids[1],"__")[[1]][2:5],collapse = " ")
xmut.ids <- unlist(lapply(xmut.ids, function(y){
paste0(strsplit(x,"__")[[1]][2:5],collapse = " ")
}))
xmut.ids
xmut.ids <- unlist(lapply(xmut.ids, function(y){
paste0(strsplit(y,"__")[[1]][2:5],collapse = " ")
}))
xmut.ids
# create variant list with a singleton and an unseen variant #
xmut.ids <- all_pic_variants
xmut.ids <- unlist(lapply(xmut.ids, function(y){
paste0(strsplit(y,"__")[[1]][2:5],collapse = " ")
}))
# create variant list with a singleton and an unseen variant #
xmut.ids <- all_pic_variants
xmut.ids <- all_pic_variants
xmut.ids <- unlist(lapply(xmut.ids, function(y){
paste0(strsplit(y,"__")[[1]][2:5],collapse = " ")
}))
xmut.ids
tcga.cancer.type <- x
reference.data = NULL
combine.with.TCGA=FALSE
# GT #
freq.tcga <- get.mutation.frequencies(xmut.ids, tcga.cancer.type=x, reference.data=NULL,combine.with.TCGA=FALSE )
freq.tcga
out_freq_GT <- as.numeric(freq.tcga)
library(Clonality)
library(Clonality)
library(Clonality)
?SNVtest2
??SNVtest2
library(Clonality)
# library(dplyr)
# library(dtplyr)
library(Clonality)
library(data.table)
data(lcis)
mut.matrix<-create.mutation.matrix(lcis )
xmut.ids <- rownames(mut.matrix)
xmut.ids <- gsub("X",23,xmut.ids)
tcga.cancer.type <- "LUAD"
reference.data <- NULL
combine.with.TCGA <- F
out_test <- get.mutation.frequencies(xmut.ids, tcga.cancer.type="LUAD", reference.data=NULL,combine.with.TCGA=FALSE )
out_test
library(Clonality)
library(Clonality)
library(data.table)
data(lcis)
mut.matrix<-create.mutation.matrix(lcis )
xmut.ids <- rownames(mut.matrix)
xmut.ids <- gsub("X",23,xmut.ids)
tcga.cancer.type <- "LUAD"
reference.data <- NULL
combine.with.TCGA <- F
out_test <- get.mutation.frequencies(xmut.ids, tcga.cancer.type="LUAD", reference.data=NULL,combine.with.TCGA=FALSE )
out_test
library(Clonality)
load("/Users/axel/Desktop/MSKCC Work/Clonality Project/temp_clonality/Clonality/data/TCGA_GT_probs.Rdata")
load("/Users/axel/Desktop/MSKCC Work/Clonality Project/temp_clonality/Clonality/data/TCGA_GT_agg_probs.Rdata")
tcga.cancer.type = "PAAD"
library(data.table)
as.data.table(GT_probs[[tcga.cancer.type]])
# get estimates for GT at that sites #
site_spe_gt <- as.data.table(GT_probs[[tcga.cancer.type]])
site_spe_gt <- site_spe_gt[site_spe_gt$warning ==0,]
site_spe_agg_gt <- as.data.table(GT_agg_probs[[tcga.cancer.type]])
site_spe_gt %>% filter(Gene == "SF3B1")
library(dplyr)
site_spe_gt %>% filter(Gene == "SF3B1")
site_spe_gt %>% filter(Gene == "RAD52")
site_spe_agg_gt <- as.data.table(GT_agg_probs[[tcga.cancer.type]])
site_spe_agg_gt %>% filter(Gene == "RAD52")
head(site_spe_agg_gt)
xmuts.id <- c("12 25398285 C A","17 7577539 G A","18 48603023 C T","1 27106364 C T","12 18443940 C T", "14 95562270 T C","X 20150381 C T","19 47729821 CCGCCGCTCGTACTGTGCGTTGAGGTCGTCCGCCAT -", "2 198266709 C G","5 1271256 G T","5 149497292 T G","12 1042167 C A","13 21562246 C G","X 39934230 C A","X 44928854 G T")
data("d.gene")
xmuts.id <- gsub("X ", "23 ", Variants)
xmuts.id <- gsub("X ", "23 ", xmuts.id)
if (is.null(tcga.cancer.type) & is.null(reference.data)) stop("You either need to specify 'tcga.cancer.type' to use TCGA based frequnecies or specify 'reference.data' to get reference dataset for frequency calculation")
if (combine.with.TCGA & (is.null(tcga.cancer.type) | is.null(reference.data))) stop("If you choose combine.with.TCGA=TRUE, i.e. to combine reference dataset with TCGA data, then you  need to  specify both'tcga.cancer.type'  and 'reference.data' ")
if (!combine.with.TCGA & (!is.null(tcga.cancer.type) & !is.null(reference.data))) warning("You choose combine.with.TCGA=FALSE, but specified both TCGA and reference data - only TCGA data will be used unless you choose combine.with.TCGA=TRUE")
combine.with.TCGA <- FALSE
if (is.null(tcga.cancer.type) & is.null(reference.data)) stop("You either need to specify 'tcga.cancer.type' to use TCGA based frequnecies or specify 'reference.data' to get reference dataset for frequency calculation")
if (combine.with.TCGA & (is.null(tcga.cancer.type) | is.null(reference.data))) stop("If you choose combine.with.TCGA=TRUE, i.e. to combine reference dataset with TCGA data, then you  need to  specify both'tcga.cancer.type'  and 'reference.data' ")
if (!combine.with.TCGA & (!is.null(tcga.cancer.type) & !is.null(reference.data))) warning("You choose combine.with.TCGA=FALSE, but specified both TCGA and reference data - only TCGA data will be used unless you choose combine.with.TCGA=TRUE")
# match variants to their genes #
matched_genes <- as.data.table(do.call('rbind',lapply(xmut.ids, function(x){
# print(x)
temp <- strsplit(x, " ")[[1]]
chr <- as.numeric(temp[1])
pos <- as.numeric(temp[2])
# print("test")
gene <- d.gene$Hugo_Symbol[d.gene$Chromosome == chr & pos > d.gene$Start & pos < d.gene$End]
if(length(gene)==0)
gene <- "MissingGeneName"
return(c(x,gene[1],NA,NA))
})))
xmut.ids <- xmuts.id
# match variants to their genes #
matched_genes <- as.data.table(do.call('rbind',lapply(xmut.ids, function(x){
# print(x)
temp <- strsplit(x, " ")[[1]]
chr <- as.numeric(temp[1])
pos <- as.numeric(temp[2])
# print("test")
gene <- d.gene$Hugo_Symbol[d.gene$Chromosome == chr & pos > d.gene$Start & pos < d.gene$End]
if(length(gene)==0)
gene <- "MissingGeneName"
return(c(x,gene[1],NA,NA))
})))
colnames(matched_genes) <- c("variant","gene","freq","aggregated_estimate")
matched_genes
# get estimates for GT at that sites #
site_spe_gt <- as.data.table(GT_probs[[tcga.cancer.type]])
site_spe_gt <- site_spe_gt[site_spe_gt$warning ==0,]
site_spe_agg_gt <- as.data.table(GT_agg_probs[[tcga.cancer.type]])
# get estimates per genes found in the matching #
genes <- unique(matched_genes$gene)
genes
i = 12
gene_temp <- genes[i]
gene_temp
variants <- matched_genes$variant[matched_genes$gene == gene_temp]
variants
site_spe_gt_temp <- site_spe_gt[site_spe_gt$Gene == gene_temp,]
site_spe_gt_temp
nrow(site_spe_gt_temp) > 0
if(nrow(site_spe_gt_temp) > 0){
variants_temp <- ifelse(variants %in% site_spe_gt_temp$Variant, variants, "each_unseen")
matched_genes[match(variants,matched_genes$variant) , 3] <- as.numeric(site_spe_gt_temp$GT[match(variants_temp,site_spe_gt_temp$Variant)])
matched_genes[match(variants,matched_genes$variant) , 4] <- FALSE
}
variants_temp <- ifelse(variants %in% site_spe_agg_gt$Variant, variants, "each_unseen")
variants_temp
matched_genes[match(variants,matched_genes$variant) , 3]
as.numeric(site_spe_agg_gt$GT_agg[match(variants_temp,site_spe_agg_gt$Variant)])
matched_genes[match(variants,matched_genes$variant) , 3] <- as.numeric(site_spe_agg_gt$GT_agg[match(variants_temp,site_spe_agg_gt$Variant)])
matched_genes[match(variants,matched_genes$variant) , 4] <- TRUE
matched_genes
for(i in 1:length(genes)){
gene_temp <- genes[i]
variants <- matched_genes$variant[matched_genes$gene == gene_temp]
site_spe_gt_temp <- site_spe_gt[site_spe_gt$Gene == gene_temp,]
if(nrow(site_spe_gt_temp) > 0){
variants_temp <- ifelse(variants %in% site_spe_gt_temp$Variant, variants, "each_unseen")
matched_genes[match(variants,matched_genes$variant) , 3] <- as.numeric(site_spe_gt_temp$GT[match(variants_temp,site_spe_gt_temp$Variant)])
matched_genes[match(variants,matched_genes$variant) , 4] <- FALSE
}
else{
variants_temp <- ifelse(variants %in% site_spe_agg_gt$Variant, variants, "each_unseen")
matched_genes[match(variants,matched_genes$variant) , 3] <- as.numeric(site_spe_agg_gt$GT_agg[match(variants_temp,site_spe_agg_gt$Variant)])
matched_genes[match(variants,matched_genes$variant) , 4] <- TRUE
}
}
matched_genes
library(Clonality)
# d.gene <- data.table::setDT(d.gene)
# print(d.gene[1,])
# make these internal data once done #
load("/Users/axel/Desktop/MSKCC Work/Clonality Project/temp_clonality/Clonality/data/TCGA_GT_probs.Rdata")
load("/Users/axel/Desktop/MSKCC Work/Clonality Project/temp_clonality/Clonality/data/TCGA_GT_agg_probs.Rdata")
usethis::use_data(GT_probs)
usethis::use_data(GT_agg_probs)
