site_spe_agg_gt.2 <- as.data.table(GT_agg_probs[[tcga.cancer.type.2]])
matched_genes.2 <- data.frame(matrix(nrow = nrow(matched_genes), ncol = 2))
for(i in 1:length(genes)){
gene_temp <- genes[i]
variants <- matched_genes$variant[matched_genes$gene == gene_temp]
site_spe_gt_temp.2 <- site_spe_gt.2[site_spe_gt.2$Gene == gene_temp,]
if(nrow(site_spe_gt_temp.2) > 0){
variants_temp <- ifelse(variants %in% site_spe_gt_temp.2$Variant, variants, "each_unseen")
matched_genes.2[match(variants,matched_genes$variant) , 1] <- as.numeric(site_spe_gt_temp.2$GT[match(variants_temp,site_spe_gt_temp.2$Variant)])
matched_genes.2[match(variants,matched_genes$variant) , 2] <- FALSE
}
else{
variants_temp <- ifelse(variants %in% site_spe_agg_gt.2$Variant, variants, "each_unseen")
matched_genes.2[match(variants,matched_genes$variant) , 1] <- as.numeric(site_spe_agg_gt.2$GT_agg[match(variants_temp,site_spe_agg_gt.2$Variant)])
matched_genes.2[match(variants,matched_genes$variant) , 2] <- TRUE
}
}
colnames(matched_genes.2) <- c("freq.2","aggregated_estimate.2")
out <- cbind(matched_genes,matched_genes.2)
### fix aggregation mismatch ###
for(i in 1:nrow(out)){
if(sum(as.logical(out$aggregated_estimate[i]), out$aggregated_estimate.2[i]) == 1){
# if first site has true --> check how many variants #
if(!as.logical(out$aggregated_estimate[i])){
temp <- site_spe_gt[site_spe_gt$Gene == out$gene[i],]
temp <- temp[-which(temp$Variant %in% c("atleast_1new","each_unseen")),]
agg_vals_temp <- sort(unique(site_spe_agg_gt$GT_agg[-which(site_spe_agg_gt$Variant %in% c("atleast_1new"))]))
vals_temp <- sort(unique(site_spe_gt$GT[site_spe_gt$Variant != "atleast_1new" & site_spe_gt$Gene == out$gene[i]]))
if(is.na(sort(unique(temp$GT))[3] < as.numeric(out$freq[i]))){
rank_temp <- which.min(abs(vals_temp - as.numeric(out$freq[i])))
out$freq[i] <- agg_vals_temp[rank_temp]
out$aggregated_estimate[i] <- TRUE
}
if(!is.na(sort(unique(temp$GT))[3] <= as.numeric(out$freq[i]))){
if(sort(unique(temp$GT))[3] < as.numeric(out$freq[i])){
rank_temp <- which.min(abs(vals_temp - as.numeric(out$freq[i])))
out$freq[i] <- agg_vals_temp[rank_temp]
out$aggregated_estimate[i] <- TRUE
}
}
}
# if second site has true #
if(!as.logical(out$aggregated_estimate.2[i])){
temp <- site_spe_gt.2[site_spe_gt.2$Gene == out$gene[i],]
temp <- temp[-which(temp$Variant %in% c("atleast_1new","each_unseen")),]
agg_vals_temp <- sort(unique(site_spe_agg_gt.2$GT_agg[-which(site_spe_agg_gt.2$Variant %in% c("atleast_1new"))]))
vals_temp <- sort(unique(site_spe_gt.2$GT[site_spe_gt.2$Variant != "atleast_1new" & site_spe_gt.2$Gene == out$gene[i]]))
if(is.na(sort(unique(temp$GT))[3] < as.numeric(out$freq.2[i]))){
rank_temp <- which.min(abs(vals_temp - as.numeric(out$freq.2[i])))
out$freq.2[i] <- agg_vals_temp[rank_temp]
out$aggregated_estimate.2[i] <- TRUE
}
if(!is.na(sort(unique(temp$GT))[3] <= as.numeric(out$freq.2[i]))){
if(sort(unique(temp$GT))[3] > as.numeric(out$freq.2[i])){
rank_temp <- which.min(abs(vals_temp - as.numeric(out$freq.2[i])))
out$freq.2[i] <- agg_vals_temp[rank_temp]
out$aggregated_estimate.2[i] <- TRUE
}
}
}
}
}
}
out
mut.matrix
library(Clonality)
library(Clonality)
# library(data.table)
library(dplyr)
rm(list=ls())
data(lcis)
mut.matrix<-create.mutation.matrix(lcis )
xmut.ids <- rownames(mut.matrix)
mut.matrix
### Default case using internal TCGA data ###
tcga.cancer.type <- "LUAD"
tcga.cancer.type.2 <- "PAAD"
reference.data <- NULL
combine.with.TCGA <- F
reference.genes=NULL
out_test <- get.mutation.frequencies(xmut.ids, tcga.cancer.type="LUAD", reference.data=NULL,combine.with.TCGA=FALSE )
out_test
######################
### Case where we have reference data but no gene information ###
tcga.cancer.type <- "LUAD"
tcga.cancer.type.2 <- "PAAD"
combine.with.TCGA <- F
load("~/Desktop/clonality_validation/data/impact_val.Rdata")
reference.data <- impact
reference.genes=NULL
combine.with.TCGA=FALSE
out_test <- get.mutation.frequencies(xmut.ids, tcga.cancer.type="LUAD", reference.data=impact,combine.with.TCGA=FALSE )
out_test
######################
### Case where we have reference data + the gene sizes but not their positions ###
tcga.cancer.type <- "LUAD"
tcga.cancer.type.2 <- "PAAD"
combine.with.TCGA <- F
load("~/Desktop/clonality_validation/data/impact_val.Rdata")
reference.data <- impact
reference.genes <- d.gene %>%
filter(Hugo_Symbol %in% unique(reference.data$Hugo_Symbol)) %>%
select(Hugo_Symbol, Exome_Size) %>%
mutate(Exome_Size = Exome_Size/2)
out_test <- get.mutation.frequencies(xmut.ids, tcga.cancer.type="LUAD", reference.data=impact, reference.genes = reference.genes,combine.with.TCGA=FALSE )
out_test
out_test <- get.mutation.frequencies(xmut.ids, tcga.cancer.type="LUAD", tcga.cancer.type.2 = "PAAD", reference.data=impact, reference.genes = reference.genes,combine.with.TCGA=FALSE )
out_test
######################
### Case where we have reference data + the gene positions ###
library(gnomeR)
tcga.cancer.type <- "LUAD"
tcga.cancer.type.2 <- "PAAD"
combine.with.TCGA <- F
load("~/Desktop/clonality_validation/data/impact_val.Rdata")
reference.data <- impact
reference.genes <- ti_468 %>%
rename(Chromosome = V1,
Start = V2,
End = V3,
Hugo_Symbol = V5) %>%
select(Chromosome, Start, End, Hugo_Symbol) %>%
filter(Chromosome != "Y") %>%
rowwise() %>%
mutate(Hugo_Symbol = strsplit(Hugo_Symbol,"_")[[1]][1],
Chromosome = gsub("X",23,Chromosome))
out_test <- get.mutation.frequencies(xmut.ids, tcga.cancer.type="LUAD", reference.data=impact, reference.genes = reference.genes,combine.with.TCGA=FALSE )
out_test
reference.genes
# print("Running test")
library(grDevices)
library(graphics)
library(stats)
library(utils)
library(data.table)
library(variantprobs)
library(dplyr)
library(dtplyr)
library(tibble)
if(!is.null(reference.data))
reference.data <- as_tibble(reference.data)
if(!is.null(reference.genes))
reference.genes <- as_tibble(reference.genes)
xmut.ids <- gsub("X",23,xmut.ids)
plus1<-TRUE
if (is.null(tcga.cancer.type) & is.null(reference.data)) stop("You either need to specify 'tcga.cancer.type' to use TCGA based frequnecies or specify 'reference.data' to get reference dataset for frequency calculation")
if (combine.with.TCGA & (is.null(tcga.cancer.type) | is.null(reference.data))) stop("If you choose combine.with.TCGA=TRUE, i.e. to combine reference dataset with TCGA data, then you  need to  specify both'tcga.cancer.type'  and 'reference.data' ")
if (!combine.with.TCGA & (!is.null(tcga.cancer.type) & !is.null(reference.data))) warning("You choose combine.with.TCGA=FALSE, but specified both TCGA and reference data - only TCGA data will be used unless you choose combine.with.TCGA=TRUE")
# match variants to their genes #
if( is.null(reference.data) || (!is.null(reference.data) && is.null(reference.genes)) || (!is.null(reference.data) && !is.null(reference.genes) && ncol(reference.genes) == 2)){
matched_genes <- as.data.table(do.call('rbind',lapply(xmut.ids, function(x){
# print(x)
temp <- strsplit(x, " ")[[1]]
chr <- as.numeric(temp[1])
pos <- as.numeric(temp[2])
# print("test")
gene <- d.gene$Hugo_Symbol[d.gene$Chromosome == chr & pos > d.gene$Start & pos < d.gene$End]
if(length(gene)==0)
gene <- "MissingGeneName"
return(c(x,gene[1],NA,NA))
})))
colnames(matched_genes) <- c("variant","gene","freq","aggregated_estimate")
}
if(is.null(reference.data)){
# get estimates for GT at that sites #
site_spe_gt <- as.data.table(GT_probs[[tcga.cancer.type]])
site_spe_gt <- site_spe_gt[site_spe_gt$warning ==0,]
site_spe_agg_gt <- as.data.table(GT_agg_probs[[tcga.cancer.type]])
# get estimates per genes found in the matching #
genes <- unique(matched_genes$gene)
for(i in 1:length(genes)){
gene_temp <- genes[i]
variants <- matched_genes$variant[matched_genes$gene == gene_temp]
site_spe_gt_temp <- site_spe_gt[site_spe_gt$Gene == gene_temp,]
if(nrow(site_spe_gt_temp) > 0){
variants_temp <- ifelse(variants %in% site_spe_gt_temp$Variant, variants, "each_unseen")
matched_genes[match(variants,matched_genes$variant) , 3] <- as.numeric(site_spe_gt_temp$GT[match(variants_temp,site_spe_gt_temp$Variant)])
matched_genes[match(variants,matched_genes$variant) , 4] <- FALSE
}
else{
variants_temp <- ifelse(variants %in% site_spe_agg_gt$Variant, variants, "each_unseen")
matched_genes[match(variants,matched_genes$variant) , 3] <- as.numeric(site_spe_agg_gt$GT_agg[match(variants_temp,site_spe_agg_gt$Variant)])
matched_genes[match(variants,matched_genes$variant) , 4] <- TRUE
}
}
if(!is.null(tcga.cancer.type.2)){
# get new estimates of tcga #
site_spe_gt.2 <- as.data.table(GT_probs[[tcga.cancer.type.2]])
site_spe_gt.2 <- site_spe_gt.2[site_spe_gt.2$warning ==0,]
site_spe_agg_gt.2 <- as.data.table(GT_agg_probs[[tcga.cancer.type.2]])
matched_genes.2 <- data.frame(matrix(nrow = nrow(matched_genes), ncol = 2))
for(i in 1:length(genes)){
gene_temp <- genes[i]
variants <- matched_genes$variant[matched_genes$gene == gene_temp]
site_spe_gt_temp.2 <- site_spe_gt.2[site_spe_gt.2$Gene == gene_temp,]
if(nrow(site_spe_gt_temp.2) > 0){
variants_temp <- ifelse(variants %in% site_spe_gt_temp.2$Variant, variants, "each_unseen")
matched_genes.2[match(variants,matched_genes$variant) , 1] <- as.numeric(site_spe_gt_temp.2$GT[match(variants_temp,site_spe_gt_temp.2$Variant)])
matched_genes.2[match(variants,matched_genes$variant) , 2] <- FALSE
}
else{
variants_temp <- ifelse(variants %in% site_spe_agg_gt.2$Variant, variants, "each_unseen")
matched_genes.2[match(variants,matched_genes$variant) , 1] <- as.numeric(site_spe_agg_gt.2$GT_agg[match(variants_temp,site_spe_agg_gt.2$Variant)])
matched_genes.2[match(variants,matched_genes$variant) , 2] <- TRUE
}
}
colnames(matched_genes.2) <- c("freq.2","aggregated_estimate.2")
out <- cbind(matched_genes,matched_genes.2)
### fix aggregation mismatch ###
for(i in 1:nrow(out)){
if(sum(as.logical(out$aggregated_estimate[i]), out$aggregated_estimate.2[i]) == 1){
# if first site has true --> check how many variants #
if(!as.logical(out$aggregated_estimate[i])){
temp <- site_spe_gt[site_spe_gt$Gene == out$gene[i],]
temp <- temp[-which(temp$Variant %in% c("atleast_1new","each_unseen")),]
agg_vals_temp <- sort(unique(site_spe_agg_gt$GT_agg[-which(site_spe_agg_gt$Variant %in% c("atleast_1new"))]))
vals_temp <- sort(unique(site_spe_gt$GT[site_spe_gt$Variant != "atleast_1new" & site_spe_gt$Gene == out$gene[i]]))
if(is.na(sort(unique(temp$GT))[3] < as.numeric(out$freq[i]))){
rank_temp <- which.min(abs(vals_temp - as.numeric(out$freq[i])))
out$freq[i] <- agg_vals_temp[rank_temp]
out$aggregated_estimate[i] <- TRUE
}
if(!is.na(sort(unique(temp$GT))[3] <= as.numeric(out$freq[i]))){
if(sort(unique(temp$GT))[3] < as.numeric(out$freq[i])){
rank_temp <- which.min(abs(vals_temp - as.numeric(out$freq[i])))
out$freq[i] <- agg_vals_temp[rank_temp]
out$aggregated_estimate[i] <- TRUE
}
}
}
# if second site has true #
if(!as.logical(out$aggregated_estimate.2[i])){
temp <- site_spe_gt.2[site_spe_gt.2$Gene == out$gene[i],]
temp <- temp[-which(temp$Variant %in% c("atleast_1new","each_unseen")),]
agg_vals_temp <- sort(unique(site_spe_agg_gt.2$GT_agg[-which(site_spe_agg_gt.2$Variant %in% c("atleast_1new"))]))
vals_temp <- sort(unique(site_spe_gt.2$GT[site_spe_gt.2$Variant != "atleast_1new" & site_spe_gt.2$Gene == out$gene[i]]))
if(is.na(sort(unique(temp$GT))[3] < as.numeric(out$freq.2[i]))){
rank_temp <- which.min(abs(vals_temp - as.numeric(out$freq.2[i])))
out$freq.2[i] <- agg_vals_temp[rank_temp]
out$aggregated_estimate.2[i] <- TRUE
}
if(!is.na(sort(unique(temp$GT))[3] <= as.numeric(out$freq.2[i]))){
if(sort(unique(temp$GT))[3] > as.numeric(out$freq.2[i])){
rank_temp <- which.min(abs(vals_temp - as.numeric(out$freq.2[i])))
out$freq.2[i] <- agg_vals_temp[rank_temp]
out$aggregated_estimate.2[i] <- TRUE
}
}
}
}
}
}
}
# no gene size file or baits #
if(is.null(reference.genes)){
reference.data.temp <- as_tibble(reference.data) %>%
filter(Cancer_Code %in% c(tcga.cancer.type, tcga.cancer.type.2))
sites <- unique(reference.data.temp$Cancer_Code)
genes <- unique(reference.data.temp$Hugo_Symbol)
GT_probs <- lapply(sites, function(y){
print(y)
out <- lapply(genes, function(x){
# print(x)
# TCGA estimates #
# get frequencies for each gene #
var_freq <- as.data.table(reference.data.temp %>%
filter(Hugo_Symbol == x, Cancer_Code == y) %>%
group_by(Variant) %>%
summarise(v_f = length(unique(patient_id))))
# var_freq <- as.data.table(reference.data.temp)[Hugo_Symbol == x & Cancer_Code == y,
#                                                .(v_f = length(unique(patient_id))),
#                                                by = .(Variant)
#                                                ]
v_f <- var_freq$v_f
names(v_f) <-var_freq$Variant
# sample size #
m <- length(unique(reference.data.temp$patient_id[reference.data.temp$Cancer_Code == y]))
N <- sum(3*d.gene$Exome_Size[d.gene$Hugo_Symbol == x])
N0 = N -length(v_f)
# run Good-Turing #
GT <- goodturing_probs(counts = v_f,m=m,N=N, N0=N0)
GT_test <- tryCatch(goodturing_probs(counts = v_f,m=m,N=N, N0=N0),
error=function(e) e, warning=function(w) w)
# keep warned genes #
warning_found_tcga = 0
if(is(GT_test,"warning") )
warning_found_tcga = 1
out <- as.data.frame(GT) %>%
rownames_to_column("Variant") %>%
mutate(Cancer_Code = y,
warning = warning_found_tcga#,
#Gene = x
)
out$Gene <- x
return(out)
})
estimates <- data.table::rbindlist(out, fill = TRUE)
return(estimates)
})
names(GT_probs) <- sites
print(colnames(GT_probs[[1]]))
################################################
# for each site combine genes that were warned #
GT_agg_probs <- list()
GT_agg_N0 <- list()
for(i in 1:length(GT_probs)){
print(i)
temp <- GT_probs[[i]]
# find all genes that were warned #
genes_agg <- as.character(unlist(unique(temp[temp$warning == 1, "Gene"])))
# get frequencies for each gene #
var_freq <- as.data.table(reference.data.temp %>%
filter(Hugo_Symbol %in% genes_agg, Cancer_Code == names(GT_probs)[i]) %>%
group_by(Variant) %>%
summarise(v_f = length(unique(patient_id))))
# var_freq <- reference.data.temp[Hugo_Symbol %in% genes_agg & Cancer_Code == names(GT_probs)[i],
#                                 .(v_f = length(unique(patient_id))),
#                                 by = .(Variant)
#                                 ]
v_f <- var_freq$v_f
names(v_f) <-var_freq$Variant
# sample size #
m <- length(unique(reference.data.temp$patient_id[reference.data.temp$Cancer_Code == names(GT_probs)[i]]))
N <- sum(3*d.gene$Exome_Size[d.gene$Hugo_Symbol %in% genes_agg])
N0 = N -length(v_f)
# run Good-Turing #
GT_agg <- goodturing_probs(counts = v_f,m=m,N=N, N0=N0)
GT_agg <- as.data.table(as.data.frame(GT_agg) %>%
rownames_to_column("Variant") %>%
mutate(Cancer_Code = names(GT_probs)[i]
))
GT_agg_probs[[i]] <- GT_agg
GT_probs[[i]] <- GT_probs[[i]][GT_probs[[i]]$warning == 0,]
GT_agg_N0[[i]] <- c(N0,N)
}
names(GT_agg_N0) <- names(GT_probs)
names(GT_agg_probs) <- names(GT_probs)
print(colnames(GT_agg_probs[[1]]))
}
as.data.table(reference.genes %>%
group_by(Hugo_Symbol) %>%
mutate(Exome_Size = sum(End - Start + 1)) %>%
ungroup())
# add sizes to all genes #
reference.genes <- as.data.table(reference.genes %>%
group_by(Hugo_Symbol) %>%
mutate(Exome_Size = sum(End - Start + 1)) %>%
ungroup())
matched_genes <- as.data.table(do.call('rbind',lapply(xmut.ids, function(x){
# print(x)
temp <- strsplit(x, " ")[[1]]
chr <- as.numeric(temp[1])
pos <- as.numeric(temp[2])
# print("test")
gene <- reference.genes$Hugo_Symbol[reference.genes$Chromosome == chr & pos > reference.genes$Start & pos < reference.genes$End]
if(length(gene)==0)
gene <- "MissingGeneName"
return(c(x,gene[1],NA,NA))
})))
colnames(matched_genes) <- c("variant","gene","freq","aggregated_estimate")
matched_genes
x <- xmut.ids[1]
# print(x)
temp <- strsplit(x, " ")[[1]]
chr <- as.numeric(temp[1])
pos <- as.numeric(temp[2])
temp
chr
pos
reference.genes$Hugo_Symbol
reference.genes$Hugo_Symbol[reference.genes$Chromosome == chr]
reference.genes$Hugo_Symbol[reference.genes$Chromosome == chr & pos > reference.genes$Start]
reference.genes$Hugo_Symbol[reference.genes$Chromosome == chr & pos > reference.genes$Start  & pos < reference.genes$End]
reference.genes[reference.genes$Chromosome == chr & pos > reference.genes$Start,]
ps
pos
out_test$gene
summary(as.factor(out_test$gene))
reference.genes
# TO DO :
# Add these examples to the vignette
# Change manual for get.mut.freqs
# Use create.mutation.matrix for the variants
# library(dplyr)
# library(dtplyr)
library(Clonality)
# library(data.table)
library(dplyr)
rm(list=ls())
data(lcis)
mut.matrix<-create.mutation.matrix(lcis )
xmut.ids <- rownames(mut.matrix)
# xmut.ids <- gsub("X",23,xmut.ids)
######################
### Case where we have reference data + the gene positions ###
library(gnomeR)
tcga.cancer.type <- "LUAD"
tcga.cancer.type.2 <- "PAAD"
combine.with.TCGA <- F
load("~/Desktop/clonality_validation/data/impact_val.Rdata")
reference.data <- impact
ti_468
reference.genes <- ti_468 %>%
rename(Chromosome = V1,
Start = V2,
End = V3,
Hugo_Symbol = V5) %>%
select(Chromosome, Start, End, Hugo_Symbol) %>%
filter(Chromosome != "Y") %>%
rowwise() %>%
mutate(Hugo_Symbol = strsplit(Hugo_Symbol,"_")[[1]][1],
Chromosome = gsub("X",23,Chromosome))
devtools::install_github("AxelitoMartin/Clonality", ref = "development")
library(Clonality)
# library(data.table)
library(dplyr)
rm(list=ls())
data(lcis)
mut.matrix<-create.mutation.matrix(lcis )
xmut.ids <- rownames(mut.matrix)
length(xmut.ids)
### Default case using internal TCGA data ###
tcga.cancer.type <- "LUAD"
tcga.cancer.type.2 <- "PAAD"
reference.data <- NULL
combine.with.TCGA <- F
reference.genes=NULL
######################
### Case where we have reference data but no gene information ###
tcga.cancer.type <- "LUAD"
tcga.cancer.type.2 <- "PAAD"
combine.with.TCGA <- F
load("~/Desktop/clonality_validation/data/impact_val.Rdata")
head(impact)
??create.mutation.matrix
### Case where we have reference data but no gene information ###
tcga.cancer.type <- "BRCA"
tcga.cancer.type.2 <- "PAAD"
combine.with.TCGA <- F
load("~/Desktop/clonality_validation/data/impact_val.Rdata")
reference.data <- impact
reference.genes=NULL
combine.with.TCGA=FALSE
### Case where we have reference data but no gene information ###
tcga.cancer.type <- "BRCA"
tcga.cancer.type.2 <- "PAAD"
combine.with.TCGA <- F
load("~/Desktop/clonality_validation/data/impact_val.Rdata")
reference.data <- impact
reference.genes=NULL
combine.with.TCGA=FALSE
out_test <- get.mutation.frequencies(xmut.ids, tcga.cancer.type="BRCA", reference.data=impact,combine.with.TCGA=FALSE )
out_test
### Case where we have reference data + the gene sizes but not their positions ###
tcga.cancer.type <- "LUAD"
tcga.cancer.type.2 <- "PAAD"
combine.with.TCGA <- F
load("~/Desktop/clonality_validation/data/impact_val.Rdata")
reference.data <- impact
reference.genes <- d.gene %>%
filter(Hugo_Symbol %in% unique(reference.data$Hugo_Symbol)) %>%
select(Hugo_Symbol, Exome_Size) %>%
mutate(Exome_Size = Exome_Size/2)
reference.genes
head(d.gene)
dim(d.gene)
### Case where we have reference data + the gene positions ###
library(gnomeR)
tcga.cancer.type <- "LUAD"
tcga.cancer.type.2 <- "PAAD"
combine.with.TCGA <- F
load("~/Desktop/clonality_validation/data/impact_val.Rdata")
reference.data <- impact
reference.genes <- ti_468 %>%
rename(Chromosome = V1,
Start = V2,
End = V3,
Hugo_Symbol = V5) %>%
select(Chromosome, Start, End, Hugo_Symbol) %>%
filter(Chromosome != "Y") %>%
rowwise() %>%
mutate(Hugo_Symbol = strsplit(Hugo_Symbol,"_")[[1]][1],
Chromosome = gsub("X",23,Chromosome))
reference.genes
library(gnomeR)
tcga.cancer.type <- "LUAD"
tcga.cancer.type.2 <- "PAAD"
combine.with.TCGA <- F
load("~/Desktop/clonality_validation/data/impact_val.Rdata")
reference.data <- impact
reference.genes <- ti_468 %>%
rename(Chromosome = V1,
Start = V2,
End = V3,
Hugo_Symbol = V5) %>%
select(Chromosome, Start, End, Hugo_Symbol) %>%
filter(Chromosome != "Y") %>%
rowwise() %>%
mutate(Hugo_Symbol = strsplit(Hugo_Symbol,"_")[[1]][1],
Chromosome = gsub("X",23,Chromosome))
out_test <- get.mutation.frequencies(xmut.ids, tcga.cancer.type="LUAD", reference.data=impact, reference.genes = reference.genes,combine.with.TCGA=FALSE )
out_test
out_test <- get.mutation.frequencies(xmut.ids, tcga.cancer.type="LUAD", tcga.cancer.type.2 = "PAAD", reference.data=impact, reference.genes = reference.genes,combine.with.TCGA=FALSE )
out_test
warnings()
usethis::use_package(c("grDevices","graphics","data.table","dplyr","dtplyr","tibble"))
usethis::use_package(c("grDevices"))
usethis::use_package(c("graphics"))
usethis::use_package(c("data.table"))
usethis::use_package(c("dplyr"))
usethis::use_package(c("dtplyr"))
usethis::use_package(c("tibble"))
