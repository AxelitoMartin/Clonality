pos <- as.numeric(temp[2])
# print("test")
gene <- d.gene$Hugo_Symbol[d.gene$Chromosome == chr & pos > d.gene$Start & pos < d.gene$End]
if(length(gene)==0)
gene <- "MissingGeneName"
return(c(x,gene[1],NA,NA))
})))
colnames(matched_genes) <- c("variant","gene","freq","aggregated_estimate")
# get estimates for GT at that sites #
site_spe_gt <- as.data.table(GT_probs[[tcga.cancer.type]])
site_spe_gt <- site_spe_gt[site_spe_gt$warning ==0,]
site_spe_agg_gt <- as.data.table(GT_agg_probs[[tcga.cancer.type]])
# get estimates per genes found in the matching #
genes <- unique(matched_genes$gene)
for(i in 1:length(genes)){
gene_temp <- genes[i]
variants <- matched_genes$variant[matched_genes$gene == gene_temp]
site_spe_gt_temp <- site_spe_gt[site_spe_gt$Gene == gene_temp,]
if(nrow(site_spe_gt_temp) > 0){
variants_temp <- ifelse(variants %in% site_spe_gt_temp$Variant, variants, "each_unseen")
matched_genes[match(variants,matched_genes$variant) , 3] <- as.numeric(site_spe_gt_temp$GT[match(variants_temp,site_spe_gt_temp$Variant)])
matched_genes[match(variants,matched_genes$variant) , 4] <- FALSE
}
else{
variants_temp <- ifelse(variants %in% site_spe_agg_gt$Variant, variants, "each_unseen")
matched_genes[match(variants,matched_genes$variant) , 3] <- as.numeric(site_spe_agg_gt$GT_agg[match(variants_temp,site_spe_agg_gt$Variant)])
matched_genes[match(variants,matched_genes$variant) , 4] <- TRUE
}
}
# get new estimates of tcga #
site_spe_gt.2 <- as.data.table(GT_probs[[tcga.cancer.type.2]])
site_spe_gt.2 <- site_spe_gt.2[site_spe_gt.2$warning ==0,]
site_spe_agg_gt.2 <- as.data.table(GT_agg_probs[[tcga.cancer.type.2]])
matched_genes.2 <- data.frame(matrix(nrow = nrow(matched_genes), ncol = 2))
i = 1
for(i in 1:length(genes)){
gene_temp <- genes[i]
variants <- matched_genes$variant[matched_genes$gene == gene_temp]
site_spe_gt_temp.2 <- site_spe_gt.2[site_spe_gt.2$Gene == gene_temp,]
if(nrow(site_spe_gt_temp.2) > 0){
variants_temp <- ifelse(variants %in% site_spe_gt_temp.2$Variant, variants, "each_unseen")
matched_genes.2[match(variants,matched_genes$variant) , 1] <- as.numeric(site_spe_gt_temp.2$GT[match(variants_temp,site_spe_gt_temp.2$Variant)])
matched_genes.2[match(variants,matched_genes$variant) , 2] <- FALSE
}
else{
variants_temp <- ifelse(variants %in% site_spe_agg_gt.2$Variant, variants, "each_unseen")
matched_genes.2[match(variants,matched_genes$variant) , 1] <- as.numeric(site_spe_agg_gt.2$GT_agg[match(variants_temp,site_spe_agg_gt.2$Variant)])
matched_genes.2[match(variants,matched_genes$variant) , 2] <- TRUE
}
}
colnames(matched_genes.2) <- c("freq.2","aggregated_estimate.2")
out <- cbind(matched_genes,matched_genes.2)
i = 1
sum(as.logical(out$aggregated_estimate[i]), out$aggregated_estimate.2[i]) == 1)
sum(as.logical(out$aggregated_estimate[i]), out$aggregated_estimate.2[i]) == 1
if(sum(as.logical(out$aggregated_estimate[i]), out$aggregated_estimate.2[i]) == 1){
# if first site has true --> check how many variants #
if(!as.logical(out$aggregated_estimate[i])){
temp <- site_spe_gt[site_spe_gt$Gene == out$gene[i],]
temp <- temp[-which(temp$Variant %in% c("atleast_1new","each_unseen")),]
agg_vals_temp <- sort(unique(site_spe_agg_gt$GT_agg[-which(site_spe_agg_gt$Variant %in% c("atleast_1new"))]))
vals_temp <- sort(unique(site_spe_gt$GT[site_spe_gt$Variant != "atleast_1new" & site_spe_gt$Gene == out$gene[i]]))
if(is.na(sort(unique(temp$GT))[3] < as.numeric(out$freq[i]))){
rank_temp <- which.min(abs(vals_temp - as.numeric(out$freq[i])))
out$freq[i] <- agg_vals_temp[rank_temp]
out$aggregated_estimate[i] <- TRUE
}
if(!is.na(sort(unique(temp$GT))[3] <= as.numeric(out$freq[i]))){
if(sort(unique(temp$GT))[3] < as.numeric(out$freq[i])){
rank_temp <- which.min(abs(vals_temp - as.numeric(out$freq[i])))
out$freq[i] <- agg_vals_temp[rank_temp]
out$aggregated_estimate[i] <- TRUE
}
}
}
# if second site has true #
if(!as.logical(out$aggregated_estimate.2[i])){
temp <- site_spe_gt.2[site_spe_gt.2$Gene == out$gene[i],]
temp <- temp[-which(temp$Variant %in% c("atleast_1new","each_unseen")),]
agg_vals_temp <- sort(unique(site_spe_agg_gt.2$GT_agg[-which(site_spe_agg_gt.2$Variant %in% c("atleast_1new"))]))
vals_temp <- sort(unique(site_spe_gt.2$GT[site_spe_gt.2$Variant != "atleast_1new" & site_spe_gt.2$Gene == out$gene[i]]))
if(is.na(sort(unique(temp$GT))[3] < as.numeric(out$freq.2[i]))){
rank_temp <- which.min(abs(vals_temp - as.numeric(out$freq.2[i])))
out$freq.2[i] <- agg_vals_temp[rank_temp]
out$aggregated_estimate.2 <- TRUE
}
if(!is.na(sort(unique(temp$GT))[3] <= as.numeric(out$freq.2[i]))){
if(sort(unique(temp$GT))[3] < as.numeric(out$freq.2[i])){
rank_temp <- which.min(abs(vals_temp - as.numeric(out$freq.2[i])))
out$freq.2[i] <- agg_vals_temp[rank_temp]
out$aggregated_estimate.2 <- TRUE
}
}
}
}
i = 5
!as.logical(out$aggregated_estimate[i])
# if first site has true --> check how many variants #
if(!as.logical(out$aggregated_estimate[i])){
temp <- site_spe_gt[site_spe_gt$Gene == out$gene[i],]
temp <- temp[-which(temp$Variant %in% c("atleast_1new","each_unseen")),]
agg_vals_temp <- sort(unique(site_spe_agg_gt$GT_agg[-which(site_spe_agg_gt$Variant %in% c("atleast_1new"))]))
vals_temp <- sort(unique(site_spe_gt$GT[site_spe_gt$Variant != "atleast_1new" & site_spe_gt$Gene == out$gene[i]]))
if(is.na(sort(unique(temp$GT))[3] < as.numeric(out$freq[i]))){
rank_temp <- which.min(abs(vals_temp - as.numeric(out$freq[i])))
out$freq[i] <- agg_vals_temp[rank_temp]
out$aggregated_estimate[i] <- TRUE
}
if(!is.na(sort(unique(temp$GT))[3] <= as.numeric(out$freq[i]))){
if(sort(unique(temp$GT))[3] < as.numeric(out$freq[i])){
rank_temp <- which.min(abs(vals_temp - as.numeric(out$freq[i])))
out$freq[i] <- agg_vals_temp[rank_temp]
out$aggregated_estimate[i] <- TRUE
}
}
}
!as.logical(out$aggregated_estimate.2[i])
temp <- site_spe_gt.2[site_spe_gt.2$Gene == out$gene[i],]
temp <- temp[-which(temp$Variant %in% c("atleast_1new","each_unseen")),]
agg_vals_temp <- sort(unique(site_spe_agg_gt.2$GT_agg[-which(site_spe_agg_gt.2$Variant %in% c("atleast_1new"))]))
vals_temp <- sort(unique(site_spe_gt.2$GT[site_spe_gt.2$Variant != "atleast_1new" & site_spe_gt.2$Gene == out$gene[i]]))
is.na(sort(unique(temp$GT))[3] < as.numeric(out$freq.2[i]))
rank_temp <- which.min(abs(vals_temp - as.numeric(out$freq.2[i])))
out$freq.2[i]
agg_vals_temp[rank_temp]
out$freq.2[i] <- agg_vals_temp[rank_temp]
out$aggregated_estimate.2 <- TRUE
!is.na(sort(unique(temp$GT))[3] <= as.numeric(out$freq.2[i]))
plus1<-TRUE
if (is.null(tcga.cancer.type) & is.null(reference.data)) stop("You either need to specify 'tcga.cancer.type' to use TCGA based frequnecies or specify 'reference.data' to get reference dataset for frequency calculation")
if (combine.with.TCGA & (is.null(tcga.cancer.type) | is.null(reference.data))) stop("If you choose combine.with.TCGA=TRUE, i.e. to combine reference dataset with TCGA data, then you  need to  specify both'tcga.cancer.type'  and 'reference.data' ")
if (!combine.with.TCGA & (!is.null(tcga.cancer.type) & !is.null(reference.data))) warning("You choose combine.with.TCGA=FALSE, but specified both TCGA and reference data - only TCGA data will be used unless you choose combine.with.TCGA=TRUE")
# match variants to their genes #
matched_genes <- as.data.table(do.call('rbind',lapply(xmut.ids, function(x){
# print(x)
temp <- strsplit(x, " ")[[1]]
chr <- as.numeric(temp[1])
pos <- as.numeric(temp[2])
# print("test")
gene <- d.gene$Hugo_Symbol[d.gene$Chromosome == chr & pos > d.gene$Start & pos < d.gene$End]
if(length(gene)==0)
gene <- "MissingGeneName"
return(c(x,gene[1],NA,NA))
})))
colnames(matched_genes) <- c("variant","gene","freq","aggregated_estimate")
# get estimates for GT at that sites #
site_spe_gt <- as.data.table(GT_probs[[tcga.cancer.type]])
site_spe_gt <- site_spe_gt[site_spe_gt$warning ==0,]
site_spe_agg_gt <- as.data.table(GT_agg_probs[[tcga.cancer.type]])
# get estimates per genes found in the matching #
genes <- unique(matched_genes$gene)
for(i in 1:length(genes)){
gene_temp <- genes[i]
variants <- matched_genes$variant[matched_genes$gene == gene_temp]
site_spe_gt_temp <- site_spe_gt[site_spe_gt$Gene == gene_temp,]
if(nrow(site_spe_gt_temp) > 0){
variants_temp <- ifelse(variants %in% site_spe_gt_temp$Variant, variants, "each_unseen")
matched_genes[match(variants,matched_genes$variant) , 3] <- as.numeric(site_spe_gt_temp$GT[match(variants_temp,site_spe_gt_temp$Variant)])
matched_genes[match(variants,matched_genes$variant) , 4] <- FALSE
}
else{
variants_temp <- ifelse(variants %in% site_spe_agg_gt$Variant, variants, "each_unseen")
matched_genes[match(variants,matched_genes$variant) , 3] <- as.numeric(site_spe_agg_gt$GT_agg[match(variants_temp,site_spe_agg_gt$Variant)])
matched_genes[match(variants,matched_genes$variant) , 4] <- TRUE
}
}
if(!is.null(tcga.cancer.type.2)){
# get new estimates of tcga #
site_spe_gt.2 <- as.data.table(GT_probs[[tcga.cancer.type.2]])
site_spe_gt.2 <- site_spe_gt.2[site_spe_gt.2$warning ==0,]
site_spe_agg_gt.2 <- as.data.table(GT_agg_probs[[tcga.cancer.type.2]])
matched_genes.2 <- data.frame(matrix(nrow = nrow(matched_genes), ncol = 2))
for(i in 1:length(genes)){
gene_temp <- genes[i]
variants <- matched_genes$variant[matched_genes$gene == gene_temp]
site_spe_gt_temp.2 <- site_spe_gt.2[site_spe_gt.2$Gene == gene_temp,]
if(nrow(site_spe_gt_temp.2) > 0){
variants_temp <- ifelse(variants %in% site_spe_gt_temp.2$Variant, variants, "each_unseen")
matched_genes.2[match(variants,matched_genes$variant) , 1] <- as.numeric(site_spe_gt_temp.2$GT[match(variants_temp,site_spe_gt_temp.2$Variant)])
matched_genes.2[match(variants,matched_genes$variant) , 2] <- FALSE
}
else{
variants_temp <- ifelse(variants %in% site_spe_agg_gt.2$Variant, variants, "each_unseen")
matched_genes.2[match(variants,matched_genes$variant) , 1] <- as.numeric(site_spe_agg_gt.2$GT_agg[match(variants_temp,site_spe_agg_gt.2$Variant)])
matched_genes.2[match(variants,matched_genes$variant) , 2] <- TRUE
}
}
colnames(matched_genes.2) <- c("freq.2","aggregated_estimate.2")
out <- cbind(matched_genes,matched_genes.2)
### fix aggregation mismatch ###
for(i in 1:nrow(out)){
if(sum(as.logical(out$aggregated_estimate[i]), out$aggregated_estimate.2[i]) == 1){
# if first site has true --> check how many variants #
if(!as.logical(out$aggregated_estimate[i])){
temp <- site_spe_gt[site_spe_gt$Gene == out$gene[i],]
temp <- temp[-which(temp$Variant %in% c("atleast_1new","each_unseen")),]
agg_vals_temp <- sort(unique(site_spe_agg_gt$GT_agg[-which(site_spe_agg_gt$Variant %in% c("atleast_1new"))]))
vals_temp <- sort(unique(site_spe_gt$GT[site_spe_gt$Variant != "atleast_1new" & site_spe_gt$Gene == out$gene[i]]))
if(is.na(sort(unique(temp$GT))[3] < as.numeric(out$freq[i]))){
rank_temp <- which.min(abs(vals_temp - as.numeric(out$freq[i])))
out$freq[i] <- agg_vals_temp[rank_temp]
out$aggregated_estimate[i] <- TRUE
}
if(!is.na(sort(unique(temp$GT))[3] <= as.numeric(out$freq[i]))){
if(sort(unique(temp$GT))[3] < as.numeric(out$freq[i])){
rank_temp <- which.min(abs(vals_temp - as.numeric(out$freq[i])))
out$freq[i] <- agg_vals_temp[rank_temp]
out$aggregated_estimate[i] <- TRUE
}
}
}
# if second site has true #
if(!as.logical(out$aggregated_estimate.2[i])){
temp <- site_spe_gt.2[site_spe_gt.2$Gene == out$gene[i],]
temp <- temp[-which(temp$Variant %in% c("atleast_1new","each_unseen")),]
agg_vals_temp <- sort(unique(site_spe_agg_gt.2$GT_agg[-which(site_spe_agg_gt.2$Variant %in% c("atleast_1new"))]))
vals_temp <- sort(unique(site_spe_gt.2$GT[site_spe_gt.2$Variant != "atleast_1new" & site_spe_gt.2$Gene == out$gene[i]]))
if(is.na(sort(unique(temp$GT))[3] < as.numeric(out$freq.2[i]))){
rank_temp <- which.min(abs(vals_temp - as.numeric(out$freq.2[i])))
out$freq.2[i] <- agg_vals_temp[rank_temp]
out$aggregated_estimate.2 <- TRUE
}
if(!is.na(sort(unique(temp$GT))[3] <= as.numeric(out$freq.2[i]))){
if(sort(unique(temp$GT))[3] < as.numeric(out$freq.2[i])){
rank_temp <- which.min(abs(vals_temp - as.numeric(out$freq.2[i])))
out$freq.2[i] <- agg_vals_temp[rank_temp]
out$aggregated_estimate.2 <- TRUE
}
}
}
}
}
}
out
xmut.ids <- gsub("X",23,xmut.ids)
plus1<-TRUE
if (is.null(tcga.cancer.type) & is.null(reference.data)) stop("You either need to specify 'tcga.cancer.type' to use TCGA based frequnecies or specify 'reference.data' to get reference dataset for frequency calculation")
if (combine.with.TCGA & (is.null(tcga.cancer.type) | is.null(reference.data))) stop("If you choose combine.with.TCGA=TRUE, i.e. to combine reference dataset with TCGA data, then you  need to  specify both'tcga.cancer.type'  and 'reference.data' ")
if (!combine.with.TCGA & (!is.null(tcga.cancer.type) & !is.null(reference.data))) warning("You choose combine.with.TCGA=FALSE, but specified both TCGA and reference data - only TCGA data will be used unless you choose combine.with.TCGA=TRUE")
# match variants to their genes #
matched_genes <- as.data.table(do.call('rbind',lapply(xmut.ids, function(x){
# print(x)
temp <- strsplit(x, " ")[[1]]
chr <- as.numeric(temp[1])
pos <- as.numeric(temp[2])
# print("test")
gene <- d.gene$Hugo_Symbol[d.gene$Chromosome == chr & pos > d.gene$Start & pos < d.gene$End]
if(length(gene)==0)
gene <- "MissingGeneName"
return(c(x,gene[1],NA,NA))
})))
colnames(matched_genes) <- c("variant","gene","freq","aggregated_estimate")
# get estimates for GT at that sites #
site_spe_gt <- as.data.table(GT_probs[[tcga.cancer.type]])
site_spe_gt <- site_spe_gt[site_spe_gt$warning ==0,]
site_spe_agg_gt <- as.data.table(GT_agg_probs[[tcga.cancer.type]])
# get estimates per genes found in the matching #
genes <- unique(matched_genes$gene)
for(i in 1:length(genes)){
gene_temp <- genes[i]
variants <- matched_genes$variant[matched_genes$gene == gene_temp]
site_spe_gt_temp <- site_spe_gt[site_spe_gt$Gene == gene_temp,]
if(nrow(site_spe_gt_temp) > 0){
variants_temp <- ifelse(variants %in% site_spe_gt_temp$Variant, variants, "each_unseen")
matched_genes[match(variants,matched_genes$variant) , 3] <- as.numeric(site_spe_gt_temp$GT[match(variants_temp,site_spe_gt_temp$Variant)])
matched_genes[match(variants,matched_genes$variant) , 4] <- FALSE
}
else{
variants_temp <- ifelse(variants %in% site_spe_agg_gt$Variant, variants, "each_unseen")
matched_genes[match(variants,matched_genes$variant) , 3] <- as.numeric(site_spe_agg_gt$GT_agg[match(variants_temp,site_spe_agg_gt$Variant)])
matched_genes[match(variants,matched_genes$variant) , 4] <- TRUE
}
}
if(!is.null(tcga.cancer.type.2)){
# get new estimates of tcga #
site_spe_gt.2 <- as.data.table(GT_probs[[tcga.cancer.type.2]])
site_spe_gt.2 <- site_spe_gt.2[site_spe_gt.2$warning ==0,]
site_spe_agg_gt.2 <- as.data.table(GT_agg_probs[[tcga.cancer.type.2]])
matched_genes.2 <- data.frame(matrix(nrow = nrow(matched_genes), ncol = 2))
for(i in 1:length(genes)){
gene_temp <- genes[i]
variants <- matched_genes$variant[matched_genes$gene == gene_temp]
site_spe_gt_temp.2 <- site_spe_gt.2[site_spe_gt.2$Gene == gene_temp,]
if(nrow(site_spe_gt_temp.2) > 0){
variants_temp <- ifelse(variants %in% site_spe_gt_temp.2$Variant, variants, "each_unseen")
matched_genes.2[match(variants,matched_genes$variant) , 1] <- as.numeric(site_spe_gt_temp.2$GT[match(variants_temp,site_spe_gt_temp.2$Variant)])
matched_genes.2[match(variants,matched_genes$variant) , 2] <- FALSE
}
else{
variants_temp <- ifelse(variants %in% site_spe_agg_gt.2$Variant, variants, "each_unseen")
matched_genes.2[match(variants,matched_genes$variant) , 1] <- as.numeric(site_spe_agg_gt.2$GT_agg[match(variants_temp,site_spe_agg_gt.2$Variant)])
matched_genes.2[match(variants,matched_genes$variant) , 2] <- TRUE
}
}
colnames(matched_genes.2) <- c("freq.2","aggregated_estimate.2")
out <- cbind(matched_genes,matched_genes.2)
### fix aggregation mismatch ###
for(i in 1:nrow(out)){
if(sum(as.logical(out$aggregated_estimate[i]), out$aggregated_estimate.2[i]) == 1){
# if first site has true --> check how many variants #
if(!as.logical(out$aggregated_estimate[i])){
temp <- site_spe_gt[site_spe_gt$Gene == out$gene[i],]
temp <- temp[-which(temp$Variant %in% c("atleast_1new","each_unseen")),]
agg_vals_temp <- sort(unique(site_spe_agg_gt$GT_agg[-which(site_spe_agg_gt$Variant %in% c("atleast_1new"))]))
vals_temp <- sort(unique(site_spe_gt$GT[site_spe_gt$Variant != "atleast_1new" & site_spe_gt$Gene == out$gene[i]]))
if(is.na(sort(unique(temp$GT))[3] < as.numeric(out$freq[i]))){
rank_temp <- which.min(abs(vals_temp - as.numeric(out$freq[i])))
out$freq[i] <- agg_vals_temp[rank_temp]
out$aggregated_estimate[i] <- TRUE
}
if(!is.na(sort(unique(temp$GT))[3] <= as.numeric(out$freq[i]))){
if(sort(unique(temp$GT))[3] < as.numeric(out$freq[i])){
rank_temp <- which.min(abs(vals_temp - as.numeric(out$freq[i])))
out$freq[i] <- agg_vals_temp[rank_temp]
out$aggregated_estimate[i] <- TRUE
}
}
}
# if second site has true #
if(!as.logical(out$aggregated_estimate.2[i])){
temp <- site_spe_gt.2[site_spe_gt.2$Gene == out$gene[i],]
temp <- temp[-which(temp$Variant %in% c("atleast_1new","each_unseen")),]
agg_vals_temp <- sort(unique(site_spe_agg_gt.2$GT_agg[-which(site_spe_agg_gt.2$Variant %in% c("atleast_1new"))]))
vals_temp <- sort(unique(site_spe_gt.2$GT[site_spe_gt.2$Variant != "atleast_1new" & site_spe_gt.2$Gene == out$gene[i]]))
if(is.na(sort(unique(temp$GT))[3] < as.numeric(out$freq.2[i]))){
rank_temp <- which.min(abs(vals_temp - as.numeric(out$freq.2[i])))
out$freq.2[i] <- agg_vals_temp[rank_temp]
out$aggregated_estimate.2[i] <- TRUE
}
if(!is.na(sort(unique(temp$GT))[3] <= as.numeric(out$freq.2[i]))){
if(sort(unique(temp$GT))[3] < as.numeric(out$freq.2[i])){
rank_temp <- which.min(abs(vals_temp - as.numeric(out$freq.2[i])))
out$freq.2[i] <- agg_vals_temp[rank_temp]
out$aggregated_estimate.2[i] <- TRUE
}
}
}
}
}
}
out
library(Clonality)
ata("GT_probs")
data("GT_probs")
names(GT_probs)
load("~/Desktop/MSKCC Work/Clonality Project/temp_clonality/Clonality/data/forAxel.Rdata")
load("~/Desktop/MSKCC Work/Clonality Project/temp_clonality/Clonality/data/tcga_variant.Rdata")
library(dplyr)
ids <- unique(unlist(aacr %>%
filter(pt == "GENIE-DFCI-003815") %>%
select(Tumor_Sample_Barcode)))
vars_1 <- as.character(unlist(aacr %>% filter(Tumor_Sample_Barcode == ids[1]) %>% select(mut)))
vars_2 <- as.character(unlist(aacr %>% filter(Tumor_Sample_Barcode == ids[2]) %>% select(mut)))
Variants <- unique(c(vars_1 ,vars_2))
mut.ids = Variants
tcga.cancer.type = "OV"
tcga.cancer.type.2 = "BRCA"
reference.data = NULL
combine.with.TCGA = F
xmut.ids <- gsub("X",23,xmut.ids)
plus1<-TRUE
if (is.null(tcga.cancer.type) & is.null(reference.data)) stop("You either need to specify 'tcga.cancer.type' to use TCGA based frequnecies or specify 'reference.data' to get reference dataset for frequency calculation")
if (combine.with.TCGA & (is.null(tcga.cancer.type) | is.null(reference.data))) stop("If you choose combine.with.TCGA=TRUE, i.e. to combine reference dataset with TCGA data, then you  need to  specify both'tcga.cancer.type'  and 'reference.data' ")
if (!combine.with.TCGA & (!is.null(tcga.cancer.type) & !is.null(reference.data))) warning("You choose combine.with.TCGA=FALSE, but specified both TCGA and reference data - only TCGA data will be used unless you choose combine.with.TCGA=TRUE")
# match variants to their genes #
matched_genes <- as.data.table(do.call('rbind',lapply(xmut.ids, function(x){
# print(x)
temp <- strsplit(x, " ")[[1]]
chr <- as.numeric(temp[1])
pos <- as.numeric(temp[2])
# print("test")
gene <- d.gene$Hugo_Symbol[d.gene$Chromosome == chr & pos > d.gene$Start & pos < d.gene$End]
if(length(gene)==0)
gene <- "MissingGeneName"
return(c(x,gene[1],NA,NA))
})))
library(data.table)
xmut.ids <- gsub("X",23,xmut.ids)
plus1<-TRUE
if (is.null(tcga.cancer.type) & is.null(reference.data)) stop("You either need to specify 'tcga.cancer.type' to use TCGA based frequnecies or specify 'reference.data' to get reference dataset for frequency calculation")
if (combine.with.TCGA & (is.null(tcga.cancer.type) | is.null(reference.data))) stop("If you choose combine.with.TCGA=TRUE, i.e. to combine reference dataset with TCGA data, then you  need to  specify both'tcga.cancer.type'  and 'reference.data' ")
if (!combine.with.TCGA & (!is.null(tcga.cancer.type) & !is.null(reference.data))) warning("You choose combine.with.TCGA=FALSE, but specified both TCGA and reference data - only TCGA data will be used unless you choose combine.with.TCGA=TRUE")
# match variants to their genes #
matched_genes <- as.data.table(do.call('rbind',lapply(xmut.ids, function(x){
# print(x)
temp <- strsplit(x, " ")[[1]]
chr <- as.numeric(temp[1])
pos <- as.numeric(temp[2])
# print("test")
gene <- d.gene$Hugo_Symbol[d.gene$Chromosome == chr & pos > d.gene$Start & pos < d.gene$End]
if(length(gene)==0)
gene <- "MissingGeneName"
return(c(x,gene[1],NA,NA))
})))
colnames(matched_genes) <- c("variant","gene","freq","aggregated_estimate")
# get estimates for GT at that sites #
site_spe_gt <- as.data.table(GT_probs[[tcga.cancer.type]])
site_spe_gt <- site_spe_gt[site_spe_gt$warning ==0,]
site_spe_agg_gt <- as.data.table(GT_agg_probs[[tcga.cancer.type]])
xmut.ids = Variants
tcga.cancer.type = "OV"
tcga.cancer.type.2 = "BRCA"
reference.data = NULL
combine.with.TCGA = F
xmut.ids <- gsub("X",23,xmut.ids)
plus1<-TRUE
if (is.null(tcga.cancer.type) & is.null(reference.data)) stop("You either need to specify 'tcga.cancer.type' to use TCGA based frequnecies or specify 'reference.data' to get reference dataset for frequency calculation")
if (combine.with.TCGA & (is.null(tcga.cancer.type) | is.null(reference.data))) stop("If you choose combine.with.TCGA=TRUE, i.e. to combine reference dataset with TCGA data, then you  need to  specify both'tcga.cancer.type'  and 'reference.data' ")
if (!combine.with.TCGA & (!is.null(tcga.cancer.type) & !is.null(reference.data))) warning("You choose combine.with.TCGA=FALSE, but specified both TCGA and reference data - only TCGA data will be used unless you choose combine.with.TCGA=TRUE")
# match variants to their genes #
matched_genes <- as.data.table(do.call('rbind',lapply(xmut.ids, function(x){
# print(x)
temp <- strsplit(x, " ")[[1]]
chr <- as.numeric(temp[1])
pos <- as.numeric(temp[2])
# print("test")
gene <- d.gene$Hugo_Symbol[d.gene$Chromosome == chr & pos > d.gene$Start & pos < d.gene$End]
if(length(gene)==0)
gene <- "MissingGeneName"
return(c(x,gene[1],NA,NA))
})))
library(Clonality)
xmut.ids <- gsub("X",23,xmut.ids)
plus1<-TRUE
if (is.null(tcga.cancer.type) & is.null(reference.data)) stop("You either need to specify 'tcga.cancer.type' to use TCGA based frequnecies or specify 'reference.data' to get reference dataset for frequency calculation")
if (combine.with.TCGA & (is.null(tcga.cancer.type) | is.null(reference.data))) stop("If you choose combine.with.TCGA=TRUE, i.e. to combine reference dataset with TCGA data, then you  need to  specify both'tcga.cancer.type'  and 'reference.data' ")
if (!combine.with.TCGA & (!is.null(tcga.cancer.type) & !is.null(reference.data))) warning("You choose combine.with.TCGA=FALSE, but specified both TCGA and reference data - only TCGA data will be used unless you choose combine.with.TCGA=TRUE")
# match variants to their genes #
matched_genes <- as.data.table(do.call('rbind',lapply(xmut.ids, function(x){
# print(x)
temp <- strsplit(x, " ")[[1]]
chr <- as.numeric(temp[1])
pos <- as.numeric(temp[2])
# print("test")
gene <- d.gene$Hugo_Symbol[d.gene$Chromosome == chr & pos > d.gene$Start & pos < d.gene$End]
if(length(gene)==0)
gene <- "MissingGeneName"
return(c(x,gene[1],NA,NA))
})))
colnames(matched_genes) <- c("variant","gene","freq","aggregated_estimate")
# get estimates for GT at that sites #
site_spe_gt <- as.data.table(GT_probs[[tcga.cancer.type]])
site_spe_gt <- site_spe_gt[site_spe_gt$warning ==0,]
site_spe_agg_gt <- as.data.table(GT_agg_probs[[tcga.cancer.type]])
# get estimates per genes found in the matching #
genes <- unique(matched_genes$gene)
for(i in 1:length(genes)){
gene_temp <- genes[i]
variants <- matched_genes$variant[matched_genes$gene == gene_temp]
site_spe_gt_temp <- site_spe_gt[site_spe_gt$Gene == gene_temp,]
if(nrow(site_spe_gt_temp) > 0){
variants_temp <- ifelse(variants %in% site_spe_gt_temp$Variant, variants, "each_unseen")
matched_genes[match(variants,matched_genes$variant) , 3] <- as.numeric(site_spe_gt_temp$GT[match(variants_temp,site_spe_gt_temp$Variant)])
matched_genes[match(variants,matched_genes$variant) , 4] <- FALSE
}
else{
variants_temp <- ifelse(variants %in% site_spe_agg_gt$Variant, variants, "each_unseen")
matched_genes[match(variants,matched_genes$variant) , 3] <- as.numeric(site_spe_agg_gt$GT_agg[match(variants_temp,site_spe_agg_gt$Variant)])
matched_genes[match(variants,matched_genes$variant) , 4] <- TRUE
}
}
!is.null(tcga.cancer.type.2)
# get new estimates of tcga #
site_spe_gt.2 <- as.data.table(GT_probs[[tcga.cancer.type.2]])
site_spe_gt.2 <- site_spe_gt.2[site_spe_gt.2$warning ==0,]
site_spe_agg_gt.2 <- as.data.table(GT_agg_probs[[tcga.cancer.type.2]])
matched_genes.2 <- data.frame(matrix(nrow = nrow(matched_genes), ncol = 2))
for(i in 1:length(genes)){
gene_temp <- genes[i]
variants <- matched_genes$variant[matched_genes$gene == gene_temp]
site_spe_gt_temp.2 <- site_spe_gt.2[site_spe_gt.2$Gene == gene_temp,]
if(nrow(site_spe_gt_temp.2) > 0){
variants_temp <- ifelse(variants %in% site_spe_gt_temp.2$Variant, variants, "each_unseen")
matched_genes.2[match(variants,matched_genes$variant) , 1] <- as.numeric(site_spe_gt_temp.2$GT[match(variants_temp,site_spe_gt_temp.2$Variant)])
matched_genes.2[match(variants,matched_genes$variant) , 2] <- FALSE
}
else{
variants_temp <- ifelse(variants %in% site_spe_agg_gt.2$Variant, variants, "each_unseen")
matched_genes.2[match(variants,matched_genes$variant) , 1] <- as.numeric(site_spe_agg_gt.2$GT_agg[match(variants_temp,site_spe_agg_gt.2$Variant)])
matched_genes.2[match(variants,matched_genes$variant) , 2] <- TRUE
}
}
colnames(matched_genes.2) <- c("freq.2","aggregated_estimate.2")
out <- cbind(matched_genes,matched_genes.2)
out
i  = 7
sum(as.logical(out$aggregated_estimate[i]), out$aggregated_estimate.2[i]) == 1
!as.logical(out$aggregated_estimate[i])
!as.logical(out$aggregated_estimate.2[i])
temp <- site_spe_gt.2[site_spe_gt.2$Gene == out$gene[i],]
temp <- temp[-which(temp$Variant %in% c("atleast_1new","each_unseen")),]
agg_vals_temp <- sort(unique(site_spe_agg_gt.2$GT_agg[-which(site_spe_agg_gt.2$Variant %in% c("atleast_1new"))]))
vals_temp <- sort(unique(site_spe_gt.2$GT[site_spe_gt.2$Variant != "atleast_1new" & site_spe_gt.2$Gene == out$gene[i]]))
agg_vals_temp
vals_temp
is.na(sort(unique(temp$GT))[3] < as.numeric(out$freq.2[i]))
is.na(sort(unique(temp$GT))[3] <= as.numeric(out$freq.2[i]))
!is.na(sort(unique(temp$GT))[3] <= as.numeric(out$freq.2[i]))
sort(unique(temp$GT))[3]
as.numeric(out$freq.2[i])
sort(unique(temp$GT))[3] > as.numeric(out$freq.2[i])
which.min(abs(vals_temp - as.numeric(out$freq.2[i])))
library(Clonality)
load("~/Desktop/GitPerso/Clonality/data/GT_probs.rda")
unique(GT_probs$LUAD$Variant)
library(Clonality)
GT_probs[["LUAD"]]
load("~/Desktop/Data_Clonality/TCGA_GT_probs.Rdata")
usethis::use_data(GT_probs,overwrite = T)
load("~/Desktop/Data_Clonality/TCGA_GT_agg_probs.Rdata")
usethis::use_data(GT_agg_probs,overwrite = T)
library(Clonality)
